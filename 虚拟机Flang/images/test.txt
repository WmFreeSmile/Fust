


struct string
{ 
	char *data;
	long long int len;
	long long int size; 
};

struct object_type
{
	struct object_type* base;
	int super_class;
	
	char type;
	
	char list[72];
	char virtual_list[72];
	char member_list[72];
	
	void* class_position;
	
	char lib_example[72];
	
	int mark;
};
struct value_type
{
	char type;
	
	long long int integer_val;
	struct string string_val;
	double double_val;
};
struct callback_type{
	char type;
	struct object_type* object_quote;
	void* method;
};
struct box_type
{
	char type;
	
	struct value_type value;
	struct object_type* object_quote;
	struct box_type* box_quote;
	struct callback_type callback_val;
};
struct stack_type
{
	char type;
	long long int integer_val;
	struct string string_val;
	double double_val;
	
	struct box_type* box_val;
	struct object_type* object_val;
	struct callback_type callback_val;
};


const char stack_box=0;
const char stack_object=1;
const char stack_integer=2;
const char stack_string=3;
const char stack_double=4;
const char stack_callback=5;

const char box_type_null=0;
const char box_type_val=1;
const char box_type_ref=2;
const char box_type_refpass=3;
const char box_type_callback=4;

const char val_type_int=0;
const char val_type_str=1;
const char val_type_dou=2;

void is_jit_print(struct stack_type** stack);
void is_jit_create(struct box_type** local_box,long long int index);
void is_jit_close(struct box_type** local_box,long long int index);

void expand_jit_copystring(struct string* destination,const char* source);

void method(
			struct stack_type** stack,
			struct box_type** local_box
			)
{
	//is_create
	is_jit_create(local_box,1);
	
	//is_create
	is_jit_create(local_box,2);
	
	//is_push_local
	(*stack)->type=stack_box;
	(*stack)->box_val=local_box+2;
	(*stack)++;
	
	//is_push_integer
	(*stack)->type=stack_integer;
	(*stack)->integer_val=0;
	(*stack)++;
	
	//is_assign_box_int
	(*stack)--;(*stack)--;
	(*stack)->type=stack_box;
	(*stack)->box_val->type=box_type_val;
	(*stack)->box_val->value.type=val_type_int;
	(*stack)->box_val->value.integer_val=(*(stack+1))->integer_val;
	(*stack)++;
	
	//is_popn
	(*stack)--;
	
for_up_3:
	//is_push_local
	(*stack)->type=stack_box;
	(*stack)->box_val=(*(local_box+2))->object_quote;
	(*stack)++;
	
	//is_to_int
	(*stack)--;
	(*stack)->type=stack_integer;
	(*stack)->integer_val=(*stack)->box_val->value.integer_val;
	(*stack)++;
	
	//is_push_integer
	(*stack)->type=stack_integer;
	(*stack)->integer_val=100000000;
	(*stack)++;
	
	//is_jb_int_int
	(*stack)--;(*stack)--;
	(*stack)->type=stack_integer;
	if((*stack)->integer_val<(*(stack+1))->integer_val)
	{
		(*stack)->integer_val=-1;
	}
	else
	{
		(*stack)->integer_val=0;
	}
	(*stack)++;
	
	//is_jz
	(*stack)--;
	if((*stack)->integer_val==0)
	{
		goto for_3;
	}
	
	//is_jmp
	goto for_main_3;
	
for_end_3:
	
	//is_push_local
	(*stack)->type=stack_box;
	(*stack)->box_val=(*(local_box+2))->object_quote;
	(*stack)++;
	
	//is_push_local
	(*stack)->type=stack_box;
	(*stack)->box_val=(*(local_box+2))->object_quote;
	(*stack)++;
	
	//is_to_int
	(*stack)--;
	(*stack)->type=stack_integer;
	(*stack)->integer_val=(*stack)->box_val->value.integer_val;
	(*stack)++;
	
	//is_push_integer
	(*stack)->type=stack_integer;
	(*stack)->integer_val=1;
	(*stack)++;
	
	//is_add_int_int
	(*stack)--;(*stack)--;
	(*stack)->type=stack_integer;
	(*stack)->integer_val=(*stack)->integer_val+(*(stack+1))->integer_val;
	(*stack)++;
	
	//is_assign_box_int
	(*stack)--;(*stack)--;
	(*stack)->type=stack_box;
	(*stack)->box_val->type=box_type_val;
	(*stack)->box_val->value.type=val_type_int;
	(*stack)->box_val->value.integer_val=(*(stack+1))->integer_val;
	(*stack)++;
	
	//is_popn
	(*stack)--;
	
	//is_jmp
	goto for_up_3;
	
for_main_3:
	
	//is_jmp
	goto for_end_3;
	
for_3:
	
	//is_push_string
	(*stack)->type=stack_string;
	expand_jit_copystring(&(*stack)->string_val,"OK");
	(*stack)++;
	
	//is_print
	is_jit_print(stack);
	
	//is_close
	is_jit_close(local_box,2);
	
	//is_close
	is_jit_close(local_box,1);
	
	//is_return
	return;
	
}